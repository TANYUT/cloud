
//redis 为例 //创建一个新的容器 并且运行
//-p: 端口映射，格式为：主机(宿主)端口:容器端口
//-d: 后台运行容器，并返回容器ID；
//--name redis-sever: 为容器指定一个名称: redis-sever
//-v /data:/data 主机的目录 /data 映射到容器的 /data。
docker run -p6397:6397 -d --name redis-sever docker.io/redis:3.0.7 redis-server --port 6397 //运行redis server
//-h "mars": 指定容器的hostname；
docker run -it --name redis-client docker.io/redis:3.0.7 redis-cli -h 172.17.0.1 -p 6379 //运行redis client
//注意在连接数据库等其他服务 不要用127.0.0.1 localhost
//docker在部署服务的时候 每一个服务都隔离了 每一个服务都肚子自一个虚拟机 可以怎么理解
//所以在连接其他服务的时候 用宿主 主机的真实 IP \

//--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； \

docker ps -a //查看镜像被那个容器占用 CONTAINER ID 容器ID
docker start redis-server
docker exec -d redis-server --port 6379
docker stop [CONTAINER ID] //停止容器
docker rm [CONTAINER ID] //删除容器 \

docker images //查看docker 程序镜像 IMAGE ID 程序ID docker rmi [IMAGE ID] //删除镜像

#使用docker构建工程步骤
###1. 使用docker-harbor作为私有库,需要配置maven,找到setting.xml( `linux可以使用find / -name settings.xml`)加入以下配置

```
<servers>
  <server>
    <id>10.211.55.5</id>
    <username>admin</username>
    <password>Harbor12345</password>
    <configuration>
      <email>smallchill@163.com</email>
    </configuration>
  </server>
</servers>

<pluginGroups>
  <pluginGroup>com.spotify</pluginGroup>
</pluginGroups>
```

###2. docker开启远程访问

如果没有远程访问,会报 `Connect to 10.211.55.5:2375 [/10.211.55.5] failed: Connection refused: connect`

在`/usr/lib/systemd/system/docker.service`,配置远程访问。主要是在[Service]这个部分，加上下面两个参数：

```
cd /usr/lib/systemd/system

vi docker.service

ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
```



###3. 在每个需要构建子项目的pom.xml下加入配置,内容可参考如下

```
<build>
  <plugins>
    <plugin>
      <groupId>com.spotify</groupId>
      <artifactId>docker-maven-plugin</artifactId>
      <version>${docker.plugin.version}</version>
      <configuration>
        <imageName>${docker.registry.url}/blade/${project.artifactId}:${project.version}</imageName>
        <dockerDirectory>${project.basedir}</dockerDirectory>
        <dockerHost>${docker.registry.host}</dockerHost>
        <resources>
          <resource>
            <targetPath>/</targetPath>
            <directory>${project.build.directory}</directory>
            <include>${project.build.finalName}.jar</include>
          </resource>
        </resources>
        <registryUrl>${docker.registry.url}</registryUrl>
        <serverId>${docker.registry.url}</serverId>
        <pushImage>true</pushImage>
      </configuration>
    </plugin>
  </plugins>
</build>
```

###4. 在每个需要构建子项目的根目录下加入Dockerfile,内容可参考如下

```
FROM anapsix/alpine-java:8_server-jre_unlimited

MAINTAINER smallchill@163.com

RUN mkdir -p /blade/gateway

WORKDIR /blade/gateway

EXPOSE 80

ADD ./target/blade-gateway.jar ./app.jar

CMD java -Djava.security.egd=file:/dev/./urandom -jar app.jar --spring.profiles.active=test

```

###5. 在工程根目录的docker-compose.yml下加入配置，内容可参考如下
```
blade-gateway:
  image: "${REGISTER}/blade/blade-gateway:${TAG}"
  ports:
  - 80:80
  networks:
    blade_net:
      ipv4_address: 192.168.2.1
```
