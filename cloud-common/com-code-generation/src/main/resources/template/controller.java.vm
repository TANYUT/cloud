package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.cloud.web.utils.ResEntity;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;
import lombok.AllArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;


/**
 * <p>
 * ${className}Controller控制层
 * </p>
 *
 * @Title: ${className}Controller.java
 * @Package: ${package}.${moduleName}.controller;
 * @Author <a href="mailto:${email}">${author}</a>
 * @Date: ${ctime}
 * @Version: ${version}
 */
@RestController
@AllArgsConstructor
@RequestMapping("${secondModuleName}")
@Api(value = "${className}ControllerAPI", description = "${className}描述")
public class ${className}Controller {
    private final ${className}Service service;


    @ApiOperation(value = "根据对象分页查询${className}", httpMethod = "GET", notes = "", response = ResEntity.class,
            extensions = @Extension(properties = @ExtensionProperty(name = "${author}/${ctime}", value = "${email}"))
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "current", value = "当前页索引", required = true, paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = "size", value = "页显示记录数", required = true, paramType = "query", dataType = "String"),
    })
    @GetMapping("/getPage")
    public ResEntity getPage(Page<${className}> page, ${className} cond) {
        return ResEntity.<IPage>resEntity(service.page(page,
                Wrappers.<${className}>query().lambda()
        ));
    }


    @ApiOperation(value = "ID查询${className}", httpMethod = "GET", notes = "", response = ResEntity.class,
            extensions = @Extension(properties = @ExtensionProperty(name = "${author}/${ctime}", value = "${email}"))
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键ID", required = true, paramType = "query", dataType = "${pk.attrType}"),
    })
    @GetMapping("/{${pk.lowerAttrName}}")
    public ResEntity getById(@PathVariable("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}) {
        return ResEntity.<${className}>resEntity(service.getById(${pk.lowerAttrName}));
    }


    @ApiOperation(value = "新增${className}", httpMethod = "POST", notes = "", response = ResEntity.class,
            extensions = @Extension(properties = @ExtensionProperty(name = "${author}/${ctime}", value = "${email}"))
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键ID", required = true, paramType = "query", dataType = "${pk.attrType}"),
    })
    @PostMapping
    public ResEntity save(@RequestBody ${className} ${classname}) {
        return ResEntity.resEntity(service.save(${classname}));
    }


    @ApiOperation(value = "ID修改${className}", httpMethod = "PUT", notes = "", response = ResEntity.class,
            extensions = @Extension(properties = @ExtensionProperty(name = "${author}/${ctime}", value = "${email}"))
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键ID", required = true, paramType = "query", dataType = "${pk.attrType}"),
    })
    @PutMapping
    public ResEntity update(@RequestBody ${className} ${classname}) {
        return ResEntity.resEntity(service.updateById(${classname}));
    }

    @ApiOperation(value = "ID删除${className}", httpMethod = "DELETE", notes = "", response = ResEntity.class,
            extensions = @Extension(properties = @ExtensionProperty(name = "${author}/${ctime}", value = "${email}"))
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键ID", required = true, paramType = "query", dataType = "${pk.attrType}"),
    })
    @DeleteMapping("/{${pk.lowerAttrName}}")
    public ResEntity removeById(@PathVariable ${pk.attrType} ${pk.lowerAttrName}) {
        return ResEntity.resEntity(service.removeById(${pk.lowerAttrName}));
    }
}